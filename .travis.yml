# use Java and non-root
dist: xenial
sudo: false
language: Java
jdk: oraclejdk9

# ignore the virtualenv that Travis creates
env:
  # run build and test on two multiple versions of Python
  matrix:
    - PYENV_VERSION=3.7.6
    - PYENV_VERSION=3.6.9
  global:
    - PYENV_ROOT=$HOME/.travis-pyenv
    - PIPENV_VENV_IN_PROJECT=1
    - PIPENV_IGNORE_VIRTUALENVS=1
    - LANG=en_US.UTF-8
    - LC_ALL=en_US.UTF-8

# install the dependencies
before_install:
  # install mdl for linting
  - gem install mdl
  # download gradle as a zip file
  - wget https://services.gradle.org/distributions/gradle-4.6-bin.zip
  - unzip -d $HOME gradle-4.6-bin.zip
  # delete the downloaded file
  - rm -rf gradle-4.6-bin.zip
  # add gradle bin to path at the beginning to ensure it overwrites old gradle
  - export PATH="$HOME/gradle-4.6/bin:$PATH"
  # install pyenv using the installer, furnishing a managed version
  # - unset PYENV_ROOT
  # - curl -L https://github.com/pyenv/pyenv-installer/raw/master/bin/pyenv-installer | bash
  # - export PATH="$HOME/.pyenv/bin:$PATH"
  # - pyenv install 3.7.6
  - wget https://github.com/praekeltfoundation/travis-pyenv/releases/latest/download/setup-pyenv.sh
  - source setup-pyenv.sh
  # pick the version of Python that was installed through Pyenv
  # - pyenv global 3.7.6
  # install all of the development dependencies for Python
  - pip install --upgrade pip
  - pip install --upgrade pipenv
  # do not allow Travis to use standard error for debugging purposes
  - unset _JAVA_OPTIONS
  # install dev dependencies with pipenv
  # - pipenv install --dev --three
  - pipenv install --dev --skip-lock --python "$PYENV_VERSION"

# cache to improve build speed
before_cache:
  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
cache:
  directories:
    - $HOME/.pyenv_cache
    - $HOME/.pip-cache/
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/

# delete any cached version of GatorGrader and require a fresh installation
before_script:
  - rm -rf $HOME/.local/share/gatorgrader

# run checks on a student's Markdown writing through GatorGrader
# run checks on the README file with mdl and proselint
# run checks on a student's Python code GatorGrader
# run checks on a student's Markdown writing through GatorGrader
# note: "gradle grade" will install GatorGrader and run all checks
script:
  # lint the assignment's documentation
  - mdl README.md
  # lint the student's reflection
  - mdl writing/reflection.md
  # Python: lint and run the program and then the program's checks
  - pipenv run lint --check
  - pipenv run test
  - pipenv run python termfrequency/compute_tf_cookbook.py inputs/input.txt
  # Java: see build.gradle
  - gradle --version
  # GatorGrader: see config/gatorgrader.yml
  - gradle grade -x build
